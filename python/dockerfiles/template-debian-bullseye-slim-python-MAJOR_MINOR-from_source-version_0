# NOTE!
# The COPY command will only work properly if
# the command using this Dockerfile to build the Docker image
# is called from the
# save-thread-result/python directory
# and will NOT work if called from the
# save-thread-result/python/tests directory
# or the
# save-thread-result directory


FROM debian:bullseye-20231120-slim AS base

RUN \
  set -eux; \
  savedAptMark="$(apt-mark showmanual)"; \
  apt-get -y update; \
  apt-get install \
  gdb \
  # placeholder line to align with template-debian-bullseye-slim-python-MAJOR_MINOR-from_source-version_legacy_1
  curl \
  gcc \
  make \
  lcov \
  pkg-config \
  libbz2-dev \
  libffi-dev \
  libgdbm-dev \
  libgdbm-compat-dev \
  liblzma-dev \
  libncurses5-dev \
  libreadline6-dev \
  libsqlite3-dev \
  libssl-dev \
  lzma \
  lzma-dev \
  tk-dev \
  uuid-dev \
  zlib1g-dev \
  -y \
  && curl -SL https://www.python.org/ftp/python/{MAJOR_MINOR_PATCH}/Python-{MAJOR_MINOR_PATCH}.tgz | tar -xzvf - \
  && cd Python-{MAJOR_MINOR_PATCH} \
  EXTRA_CFLAGS="$(dpkg-buildflags --get CFLAGS)"; \
      LDFLAGS="$(dpkg-buildflags --get LDFLAGS)"; \
      LDFLAGS="${{LDFLAGS:--Wl}},--strip-all"; \
  nproc="$(nproc)" ; \
  gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; \
  ./configure \
    --build="$gnuArch" \
		# --enable-optimizations \
		--enable-shared \
    --without-ensurepip ; \
  make -j $(nproc) \
    "EXTRA_CFLAGS=${{EXTRA_CFLAGS:-}}" \
    "LDFLAGS=${{LDFLAGS:-}}" \
    "PROFILE_TASK=${{PROFILE_TASK:-}}" ; \
  # https://github.com/docker-library/python/issues/784
  # prevent accidental usage of a system installed libpython of the same version
  rm python; \
  make -j "$nproc" \
    "EXTRA_CFLAGS=${{EXTRA_CFLAGS:-}}" \
    "LDFLAGS=${{LDFLAGS:--Wl}},-rpath='\$\$ORIGIN/../lib'" \
    "PROFILE_TASK=${{PROFILE_TASK:-}}" \
    python \
  && make install \
  && cd / \
  && rm -rf Python-{MAJOR_MINOR_PATCH} \
  && find /usr/local -depth \
               \( \
                       \( -type d -a \( -name test -o -name tests -o -name idle_test \) \) \
                       -o \( -type f -a \( -name '*.pyc' -o -name '*.pyo' -o -name 'libpython*.a' \) \) \
               \) -exec rm -rf '{{}}' + \
       ; \
  # ldconfig; \
  apt-mark auto '.*' > /dev/null; \
  # apt-mark manual $savedAptMark; \
  find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec ldd '{{}}' ';' \
    | awk '/=>/ {{ so = $(NF-1); if (index(so, "/usr/local/") == 1) {{ next }}; gsub("^/(usr/)?", "", so); printf "*%s\n", so }}' \
    | sort -u \
    | xargs -r dpkg-query --search \
    | cut -d: -f1 \
    | sort -u \
    | xargs -r apt-mark manual \
  ; \
  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
  rm -rf /var/lib/apt/lists/*


COPY . ./save_thread_result/python

CMD ["python{MAJOR_MINOR}", "save_thread_result/python/dummy_example.py"]
